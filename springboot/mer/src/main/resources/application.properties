#port 설정
server.port = 5001


#DB 연동
<<<<<<< HEAD
spring.datasource.url=jdbc:postgresql://52.231.73.1:5432/redteam
#jdbc:postgresql://52.231.73.1/redteam
spring.datasource.username=redteam
#postgres
spring.datasource.password=dkagh1234!
#1673
=======
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=postgres
spring.datasource.url=jdbc:postgresql://52.231.73.1:5432/redteam
spring.datasource.username=redteam
spring.datasource.password=dkagh1234!
spring.datasource.maximumPoolSize=10
spring.datasource.hikari.max-lifetime=30000
>>>>>>> 89e06c9669e2cb2e3ac4700aaa34a75f06609a7d

#JPA 설정
#Dialect 설정

#하이버네이트가 실행하는 모든 SQL문을 콘솔로 출력해 준다.
spring.jpa.properties.hibernate.show_sql=true
#콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현한다.
spring.jpa.properties.hibernate.format_sql=true
#디버깅이 용이하도록 SQL문 이외에 추가적인 정보를 출력해 준다.
spring.jpa.properties.hibernate.use_sql_comments=true
#camel 형식을 _형식으로 변환
#spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#kafka 설정
#spring.kafka.bootstrap-servers = 52.231.73.1:9092
spring.kafka.bootstrap-servers = localhost:9092

#kafka consumer
#spring.kafka.consumer.auto-offset-reset = latest
spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages = *

#kafka producer
#spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer